     1                                  [bits 16]
     2                                  [org 0x7c00]
     3                                  stack_ring0	equ	0x8000
     4                                  stack_ring3	equ	0x8400
     5                                  stack_task1	equ	stack_ring3 - 0x100
     6                                  stack_task2	equ	stack_ring3 - 0x200
     7                                  IOPLbits		equ	12
     8                                  TIbit				equ	2
     9                                  count3sec		equ	200					; note: vertical sync length is approx. 15 millisec. 15 millisec x 200 = 3000 millisec
    10                                  RPL3				equ	3
    11                                  TI 					equ (1 << TIbit)	; Table Indicator
    12                                  
    13 00000000 EA[3301]0000            jmp 0:boot                  ; CS = 0x0000 on start up
    14                                  
    15                                  ;
    16                                  ; Global Descriptor Table
    17                                  ;
    18                                  gdt_start:
    19                                  gdt_null:                   ; null descriptor (required)
    20 00000005 0000000000000000        		dq  0
    21                                  
    22                                  gdt_code_ring0:							; code segment descriptor (0x000000 - 0x00ffff)
    23 0000000D FFFF                    		dw  0xffff              ; limit
    24 0000000F 0000                    		dw  0                   ; base lower 16 bits
    25 00000011 00                      		db  0                   ; base upper 8 bits
    26 00000012 9A                      		db  10011010b           ; present, privilege level 0 (highest privilege), code, non-conforming, readable
    27 00000013 0000                    		dw  0                   ; (not used in 80286) D bit is cleaed then operand length and EA are assumed to be 16 bits long
    28                                  
    29                                  gdt_data_ring0:							; data segment descriptor (0x000000 - 0x00ffff)
    30 00000015 FFFF                    		dw  0xffff              ; limit
    31 00000017 0000                    		dw  0                   ; base lower 16 bits
    32 00000019 00                      		db  0                   ; base upper 8 bits
    33 0000001A 92                      		db  10010010b           ; present, privilege level 0 (highest privilege), data, expand-up, writable
    34 0000001B 0000                    		dw  0                   ; (not used in 80286) D bit is cleaed then operand length and EA are assumed to be 16 bits long
    35                                  
    36                                  gdt_code_ring3:							; code segment descriptor (0x000000 - 0x00ffff)
    37 0000001D FFFF                    		dw  0xffff              ; limit
    38 0000001F 0000                    		dw  0                   ; base lower 16 bits
    39 00000021 00                      		db  0                   ; base upper 8 bits
    40 00000022 FA                      		db  11111010b           ; present, privilege level 3 (least privilege), code, non-conforming, readable
    41 00000023 0000                    		dw  0                   ; (not used in 80286) D bit is cleaed then operand length and EA are assumed to be 16 bits long
    42                                  
    43                                  gdt_data_ring3:							; data segment descriptor (0x000000 - 0x00ffff)
    44 00000025 FFFF                    		dw  0xffff              ; limit
    45 00000027 0000                    		dw  0                   ; base lower 16 bits
    46 00000029 00                      		db  0                   ; base upper 8 bits
    47 0000002A F2                      		db  11110010b           ; present, privilege level 3 (least privilege), data, expand-up, writable
    48 0000002B 0000                    		dw  0                   ; (not used in 80286) D bit is cleaed then operand length and EA are assumed to be 16 bits long
    49                                  
    50                                  gdt_vram:                   ; data segment descriptor (VGA text color video memory: 0x0b8000-0x0b8fff)
    51 0000002D 9F0F                    		dw  80 * 25 * 2 - 1     ; limit
    52 0000002F 0080                    		dw  0x8000              ; base lower 16 bits
    53 00000031 0B                      		db  0x0b                ; base upper 8 bits
    54 00000032 F2                      		db  11110010b           ; present, privilege level 3 (least privilege), data, expand-up, writable
    55 00000033 0000                    		dw  0                   ; (not used in 80286) D bit is cleaed then operand length and EA are assumed to be 16 bits long
    56                                  
    57                                  gdt_tss0:										; TSS descriptor
    58 00000035 2B00                    		dw	tss_0_end - tss_0 - 1	; limit
    59 00000037 [7B00]                  		dw	tss_0								; base lower 16 bits
    60 00000039 00                      		db	0										; base upper 8 bits
    61 0000003A E1                      		db	11100001b						; present, privilege level 3 (least privilege), system, available TSS
    62 0000003B 0000                    		dw	0										; (not used in 80286)
    63                                  
    64                                  gdt_tss_dispatcher:					; TSS descriptor
    65 0000003D 2B00                    		dw	tss_dispatcher_end - tss_dispatcher - 1	; limit
    66 0000003F [A700]                  		dw	tss_dispatcher			; base lower 16 bits
    67 00000041 00                      		db	0										; base upper 8 bits
    68 00000042 E1                      		db	11100001b						; present, privilege level 3 (least privilege), system, available TSS
    69 00000043 0000                    		dw	0										; (not used in 80286)
    70                                  
    71                                  gdt_tss_task1:							; TSS descriptor
    72 00000045 2B00                    		dw	tss_task1_end - tss_task1 - 1	; limit
    73 00000047 [D300]                  		dw	tss_task1						; base lower 16 bits
    74 00000049 00                      		db	0										; base upper 8 bits
    75 0000004A E1                      		db	11100001b						; present, privilege level 3 (least privilege), system, available TSS
    76 0000004B 0000                    		dw	0										; (not used in 80286)
    77                                  
    78                                  gdt_tss_task2:							; TSS descriptor
    79 0000004D 2B00                    		dw	tss_task2_end - tss_task2 - 1	; limit
    80 0000004F [FF00]                  		dw	tss_task2						; base lower 16 bits
    81 00000051 00                      		db	0										; base upper 8 bits
    82 00000052 E1                      		db	11100001b						; present, privilege level 3 (least privilege), system, available TSS
    83 00000053 0000                    		dw	0										; (not used in 80286)
    84                                  
    85                                  gdt_ldtd_dispat:            ; system (LDT) descriptor
    86 00000055 0700                        dw  ldt_dispat_end - ldt_dispat -1  ; limit
    87 00000057 [2B01]                      dw  ldt_dispat          ; base lower 16 bits
    88 00000059 00                          db  0                   ; base upeer 8 bits
    89 0000005A E2                          db  11100010b           ; present privilege level 3 (least privilege), system segment, LDT descriptor
    90 0000005B 0000                        dw  0
    91                                  
    92                                  gdt_tg_dispat:							; task gate descriptor
    93 0000005D 0000                    		dw	0										; unused
    94 0000005F 3800                    		dw	dispatcher_tss			; TSS selector
    95 00000061 00                      		db	0										; unused
    96 00000062 E5                      		db	11100101b						; present privilege level 3 (least privilege), system segment, gate descriptor
    97 00000063 0000                    		dw	0
    98                                  
    99                                  gdt_tg_task1:
   100 00000065 0000                    		dw	0										; unused
   101 00000067 4000                    		dw	task1_tss						; TSS selector
   102 00000069 00                      		db	0										; unused
   103 0000006A E5                      		db	11100101b						; present privilege level 3 (least privilege), system segment, gate descriptor
   104 0000006B 0000                    		dw	0
   105                                  
   106                                  gdt_tg_task2:
   107 0000006D 0000                    		dw	0										; unused
   108 0000006F 4800                    		dw	task2_tss						; TSS selector
   109 00000071 00                      		db	0										; unused
   110 00000072 E5                      		db	11100101b						; present privilege level 3 (least privilege), system segment, gate descriptor
   111 00000073 0000                    		dw	0
   112                                  gdt_end:
   113                                  
   114                                  gdt_descriptor:
   115 00000075 6F00                    		dw  gdt_end - gdt_start - 1 ; limit of the gdt
   116 00000077 [05000000]              		dd  gdt_start           ; physical starting address of the gdt
   117                                  
   118                                  code_seg_ring0	equ gdt_code_ring0 - gdt_start
   119                                  data_seg_ring0	equ gdt_data_ring0 - gdt_start
   120                                  code_seg_ring3	equ gdt_code_ring3 - gdt_start
   121                                  data_seg_ring3	equ gdt_data_ring3 - gdt_start
   122                                  vram_seg				equ gdt_vram - gdt_start
   123                                  tg_dispat				equ gdt_tg_dispat - gdt_start
   124                                  tg_task1				equ gdt_tg_task1 - gdt_start
   125                                  tg_task2				equ gdt_tg_task2 - gdt_start
   126                                  
   127                                  tss0						equ	gdt_tss0 - gdt_start
   128                                  dispatcher_tss	equ gdt_tss_dispatcher - gdt_start
   129                                  task1_tss				equ gdt_tss_task1 - gdt_start
   130                                  task2_tss				equ gdt_tss_task2 - gdt_start
   131                                  
   132                                  dispatcher_ldt	equ gdt_ldtd_dispat - gdt_start
   133                                  ldt_vram_seg		equ	(ldt_vram - ldt_dispat) | TI	; it refers to the LDT, not the GDT
   134                                  
   135                                  ;
   136                                  ; Task State Segment
   137                                  ;
   138                                  tss_0:
   139 0000007B 0000                    		dw	0									; previous TSS
   140 0000007D 0080                    		dw	stack_ring0				; sp for CPL 0
   141 0000007F 1000                    		dw	data_seg_ring0		; ss for CPL 0
   142                                  		; everything below here is unused
   143 00000081 0000<rep 13h>           		times	19	dw	0
   144                                  tss_0_end:
   145                                  
   146                                  tss_dispatcher:
   147 000000A7 0000                    		dw	0									; previous TSS
   148 000000A9 0080                    		dw	stack_ring0				; (never altered) sp for CPL 0
   149 000000AB 1000                    		dw	data_seg_ring0		; (never altered) ss for CPL 0
   150 000000AD 0000<rep 4h>            		times	4		dw	0				; (never altered, not used) sp for CPL 1, ss for CPL 1, sp for CPL 2, ss for CPL 2
   151 000000B5 [6701]                  		dw	dispatcher_ring3	; ip (entry point)
   152 000000B7 0030                    		dw	(3 << IOPLbits)		; flag: set I/O prililege level to 3
   153 000000B9 0000<rep 4h>            		times 4		dw	0				; ax, cx, dx, bx
   154 000000C1 0084                    		dw	stack_ring3				; initial sp
   155 000000C3 0000<rep 3h>            		times	3		dw	0				; bp, si, di
   156                                  ;		dw	vram_seg | RPL3		; es selector 
   157 000000C9 0400                    		dw	ldt_vram_seg			; es selector, which is located in the LDT (not in the GDT)
   158 000000CB 1B00                    		dw	code_seg_ring3 | RPL3		; cs selector
   159 000000CD 2300                    		dw	data_seg_ring3 | RPL3		; ss selector
   160 000000CF 2300                    		dw	data_seg_ring3 | RPL3		; (unused) ds selector
   161 000000D1 5000                    		dw	dispatcher_ldt		; task ldt selector
   162                                  tss_dispatcher_end:
   163                                  
   164                                  tss_task1:
   165 000000D3 0000                    		dw	0									; previous TSS
   166 000000D5 0080                    		dw	stack_ring0				; (never altered) sp for CPL 0
   167 000000D7 1000                    		dw	data_seg_ring0		; (never altered) ss for CPL 0
   168 000000D9 0000<rep 4h>            		times	4		dw	0				; (never altered, not used) sp for CPL 1, ss for CPL 1, sp for CPL 2, ss for CPL 2
   169 000000E1 [A301]                  		dw	task1_ring3				; ip (entry point)
   170 000000E3 0000<rep 5h>            		times 5		dw	0				; flag, ax, cx, dx, bx
   171 000000ED 0083                    		dw	stack_task1				; initial sp
   172 000000EF 0000<rep 3h>            		times	3		dw	0				; bp, si, di
   173 000000F5 2B00                    		dw	vram_seg | RPL3		; es selector 
   174 000000F7 1B00                    		dw	code_seg_ring3 | RPL3		; cs selector
   175 000000F9 2300                    		dw	data_seg_ring3 | RPL3		; ss selector
   176 000000FB 2300                    		dw	data_seg_ring3 | RPL3		; (unused) ds selector
   177 000000FD 0000                    		dw	0									; (unused) task ldt selector
   178                                  tss_task1_end:
   179                                  
   180                                  tss_task2:
   181 000000FF 0000                    		dw	0									; previous TSS
   182 00000101 0080                    		dw	stack_ring0				; (never altered) sp for CPL 0
   183 00000103 1000                    		dw	data_seg_ring0		; (never altered) ss for CPL 0
   184 00000105 0000<rep 4h>            		times	4		dw	0				; (never altered, not used) sp for CPL 1, ss for CPL 1, sp for CPL 2, ss for CPL 2
   185 0000010D [BA01]                  		dw	task2_ring3				; ip (entry point)
   186 0000010F 0000<rep 5h>            		times 5		dw	0				; flag, ax, cx, dx, bx
   187 00000119 0082                    		dw	stack_task2				; initial sp
   188 0000011B 0000<rep 3h>            		times	3		dw	0				; bp, si, di
   189 00000121 2B00                    		dw	vram_seg | RPL3		; es selector 
   190 00000123 1B00                    		dw	code_seg_ring3 | RPL3		; cs selector
   191 00000125 2300                    		dw	data_seg_ring3 | RPL3		; ss selector
   192 00000127 2300                    		dw	data_seg_ring3 | RPL3		; (unused) ds selector
   193 00000129 0000                    		dw	0									; (unused) task ldt selector
   194                                  tss_task2_end:
   195                                  
   196                                  ;
   197                                  ; Local Descriptor Tables
   198                                  ;
   199                                  ldt_dispat:
   200                                  ;
   201                                  ; Note: I tried to put the task gate(s) into the LDT in vain. I could not have shed light on this issue.
   202                                  ; The task gate(s) in the GDT works as I expected, though.
   203                                  ;
   204                                  ;ldt_tg_dispat:						; task gate descriptor
   205                                  ;		dw	0									; unused
   206                                  ;		dw	dispatcher_tss		; TSS selector
   207                                  ;		db	0									; unused
   208                                  ;		db	11100101b					; present privilege level 3 (least privilege), system segment, gate descriptor
   209                                  ;		dw	0
   210                                  ldt_vram:
   211 0000012B 9F0F                    		dw  80 * 25 * 2 - 1   ; limit
   212 0000012D 0080                    		dw  0x8000            ; base lower 16 bits
   213 0000012F 0B                      		db  0x0b              ; base upper 8 bits
   214 00000130 F2                      		db  11110010b         ; present, privilege level 3 (least privilege), data, expand-up, writable
   215 00000131 0000                    		dw  0                 ; (not used in 80286) D bit is cleaed then operand length and EA are assumed to be 16 bits long
   216                                  ldt_dispat_end:
   217                                  
   218                                  boot:
   219 00000133 FA                      		cli
   220 00000134 0F0116[7500]            		lgdt    [gdt_descriptor]
   221                                  
   222                                  ; codes for 80286         ; MSW register is a 16-bit register but only the lower 4 bits are used
   223 00000139 0F01E0                  		smsw ax               ; and it is a part of CR0 register in 80386 (or later).
   224 0000013C 83C801                  		or ax, 1              ; set PE bit (bit 0)
   225 0000013F 0F01F0                  		lmsw ax
   226                                  
   227                                  ; for 80386 and upwards     PG (Paging, bit 31) and ET (Extention Type, bit 4) are added to CR0.
   228                                  ;mov eax, cr0
   229                                  ;or  eax, 1
   230                                  ;mov cr0, eax
   231                                  ;
   232 00000142 EA[4701]0800            		jmp code_seg_ring0:start_pm_ring0
   233                                  
   234                                  ;[bits 32]  This directive should be removed. As the descriptors say, operands and effective address are 16 bits in size
   235                                  textcolor1	equ 0x1b        ; BG color : blue, FG color : bright cyan, no blink
   236                                  textcolor2	equ 0x14 + 0x00	; BG color : blue, FG color : red, no blink
   237                                  textcolor3	equ 0x12 + 0x00	; BG color : blue, FG color : green, no blink
   238                                  
   239                                  start_pm_ring0:							; now entered into the 16 bit-protected mode ring 0 from the real mode
   240 00000147 FA                      		cli											; disable interrupt for least securiy as IDT is not set up yet
   241                                  
   242 00000148 B81000                  		mov ax, data_seg_ring0
   243 0000014B 8ED0                    		mov ss, ax							; I know the ED bit is not set but it does not have to be set for use in SS
   244 0000014D BC0080                  		mov sp, stack_ring0
   245                                  
   246 00000150 B83000                  		mov ax, tss0						; only operable at prililege level 0
   247 00000153 0F00D8                  		ltr ax
   248                                  
   249                                  ; set up the stack frame iret expects
   250 00000156 6A23                    		push (data_seg_ring3) | RPL3	; data selector (ring 3 stack with bottom 2 bits set for ring 3)
   251 00000158 680084                  		push stack_ring3							; sp (ring 3)
   252 0000015B 9C                      		pushf
   253 0000015C 6A1B                    		push (code_seg_ring3) | RPL3	; code selector (ring 3 code with bottom 2 bits set for ring 3)
   254 0000015E 68[6201]                		push start_pm_ring3
   255 00000161 CF                      		iret													; make it get to ring 3
   256                                  
   257                                  start_pm_ring3:
   258                                  ;		jmp (dispatcher_tss | RPL3):0
   259 00000162 EA00005800              		jmp tg_dispat:0
   260                                  
   261                                  ;
   262                                  ; task dispatcher
   263                                  ;
   264                                  dispatcher_ring3:
   265 00000167 31FF                    		xor di, di
   266 00000169 B41B                    		mov ah, textcolor1			; clear screen
   267 0000016B B020                    		mov al, ' ' 
   268 0000016D B9D007                  		mov cx, 80 * 25
   269 00000170 FC                      		cld
   270 00000171 F3AB                    rep stosw
   271                                  
   272 00000173 31C0                    		xor ax, ax
   273                                  dispat_loop:
   274 00000175 50                      		push ax
   275 00000176 88C2                    		mov dl, al
   276 00000178 80E201                  		and dl, 1
   277 0000017B 7507                    		jnz next_task						; round robin dispatch
   278                                  ;		call task1_seg:0
   279 0000017D 9A00006000              		call tg_task1:0
   280 00000182 EB05                    		jmp skip
   281                                  next_task:
   282                                  ;		call task2_seg:0
   283 00000184 9A00006800              		call tg_task2:0
   284                                  skip:
   285 00000189 E80400                  		call delay_3sec
   286 0000018C 58                      		pop ax
   287 0000018D 40                      		inc ax
   288 0000018E EBE5                    		jmp dispat_loop
   289                                  
   290                                  delay_3sec:
   291 00000190 B9C800                  		mov cx, count3sec				; note: vertical sync length is approx. 15 millisec
   292                                  delay_loop:
   293 00000193 BADA03                  		mov dx, 0x3da						; 0x3da: vga status register
   294                                  vset:
   295 00000196 EC                      		in al, dx
   296 00000197 2408                    		and al, 8								; b3: vertical retrace bit
   297 00000199 75FB                    		jnz vset								; wait for it to be clear
   298                                  vclr:
   299 0000019B EC                      		in al, dx
   300 0000019C 2408                    		and al, 8
   301 0000019E 74FB                    		jz vclr									; wait for the retrace bit to be newly set
   302 000001A0 E2F1                    		loop delay_loop
   303 000001A2 C3                      		retn
   304                                  
   305                                  ;
   306                                  ; task 1
   307                                  ;
   308                                  task1_ring3:
   309 000001A3 FC                      		cld
   310 000001A4 BFA000                  		mov di, 80 * 2
   311 000001A7 B41B                    		mov ah, textcolor1
   312 000001A9 B020                    		mov al, ' ' 
   313 000001AB AB                      		stosw
   314 000001AC AB                      		stosw
   315 000001AD AB                      		stosw
   316 000001AE 31FF                    		xor di, di
   317 000001B0 B414                    		mov ah, textcolor2
   318 000001B2 B0DB                    		mov al, 0xdb						; ALT-2588 '𒖈'
   319 000001B4 AB                      		stosw
   320 000001B5 AB                      		stosw
   321 000001B6 AB                      		stosw
   322 000001B7 CF                      		iret
   323 000001B8 EBE9                    		jmp task1_ring3
   324                                  
   325                                  ;
   326                                  ; task 2
   327                                  ;
   328                                  task2_ring3:
   329 000001BA FC                      		cld
   330 000001BB 31FF                    		xor di, di
   331 000001BD B41B                    		mov ah, textcolor1
   332 000001BF B020                    		mov al, ' ' 
   333 000001C1 AB                      		stosw
   334 000001C2 AB                      		stosw
   335 000001C3 AB                      		stosw
   336 000001C4 BFA000                  		mov di, 80 * 2
   337 000001C7 B412                    		mov ah, textcolor3
   338 000001C9 B0DB                    		mov al, 0xdb						; ALT-2588 '𒖈' (CP437)
   339 000001CB AB                      		stosw
   340 000001CC AB                      		stosw
   341 000001CD AB                      		stosw
   342 000001CE CF                      		iret
   343 000001CF EBE9                    		jmp task2_ring3
   344                                  
   345 000001D1 00<rep 2Dh>             		times 510-($-$$)  db 0  ; fill bytes from current location to 510 with zero	
   346 000001FE 55AA                    		dw 0xaa55               ; bootable sector marker
